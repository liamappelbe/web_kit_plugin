import Flutter
import Foundation
import UIKit
import WebKit

public class WebKitPlugin: NSObject, FlutterPlugin {
  public static func register(with registrar: FlutterPluginRegistrar) {
    let factory = WebKitViewFactory(messenger: registrar.messenger())
    registrar.register(factory, withId: "plugins.flutter.io/swift_webview")
  }
}

class WebKitViewFactory: NSObject, FlutterPlatformViewFactory {
  private var messenger: FlutterBinaryMessenger

  init(messenger: FlutterBinaryMessenger) {
    self.messenger = messenger
    super.init()
  }

  func create(
    withFrame frame: CGRect,
    viewIdentifier viewId: Int64,
    arguments args: Any?
  ) -> FlutterPlatformView {
    return WebKitNativeView(id: args as! Int)
  }

  /// Implementing this method is only necessary when the `arguments` in `createWithFrame` is not `nil`.
  public func createArgsCodec() -> FlutterMessageCodec & NSObjectProtocol {
    return FlutterStandardMessageCodec.sharedInstance()
  }
}

class WebKitNativeView: NSObject, FlutterPlatformView {
  private var _webView: WebKitViewWrapper

  init(id: Int) {
    _webView = WebKitViewWrapper.instances[id]!.value!
    super.init()
  }

  func view() -> UIView {
    return _webView.view()
  }
}

class WeakRef<T: AnyObject> {
  weak var value: T?
  init(value: T) {
    self.value = value
  }
}

@objc class NavigationDelegateWrapper : NSObject, WKNavigationDelegate {
  // SwiftNagivationDelegate.onNavigationRequest
  @objc var decidePolicyForNavigationAction:
      ((WKNavigationAction, _: Closure_Void_Int) -> Void)?
  func webView(
      _ webView: WKWebView,
      decidePolicyFor navigationAction: WKNavigationAction,
      decisionHandler: @escaping (WKNavigationActionPolicy) -> Void) {
    var handlerWrapper: Closure_Void_Int? = nil
    handlerWrapper = Closure_Void_Int(closure: {
      (policy: Int) -> Void in
      decisionHandler(WKNavigationActionPolicy(rawValue: policy)!);
      handlerWrapper = nil
    });
    decidePolicyForNavigationAction!(navigationAction, handlerWrapper!);
  }
}

// All code below this point should be auto-generated by upcoming tools.

@objc class WebKitViewWrapper : NSObject {
  static var instances: [Int: WeakRef<WebKitViewWrapper>] = [:]

  private var _webView: WKWebView

  @objc init(id: Int) {
    let webConfiguration = WKWebViewConfiguration()
    _webView = WKWebView(frame: .zero, configuration: webConfiguration)

    super.init()

    WebKitViewWrapper.instances[id] = WeakRef(value: self)
  }

  func view() -> UIView {
    return _webView
  }

  @objc func load(request: URLRequest) {
    _webView.load(request)
  }

  @objc func setBackgroundColor(
      red: CGFloat, green: CGFloat, blue: CGFloat, alpha: CGFloat) {
    _webView.backgroundColor = UIColor(
        red: red, green: green, blue: blue, alpha: alpha)
  }

  @objc func setJavaScriptEnabled(enabled: Bool) {
    _webView.configuration.preferences.javaScriptEnabled = enabled
  }

  @objc func setNavigationDelegate(delegate: NavigationDelegateWrapper) {
    _webView.navigationDelegate = delegate
  }
}

@objc class NavigationActionPolicy : NSObject {
  @objc static let cancel = 0;
  @objc static let allow = 1;
  @objc static let download = 2;
}

@objc class Closure_Void_Int : NSObject {
  private var _closure: (Int) -> Void

  init(closure: @escaping (Int) -> Void) {
    _closure = closure
    super.init()
  }

  @objc func call(arg: Int) {
    return _closure(arg);
  }
}
